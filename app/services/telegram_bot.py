import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, User
from uuid import UUID

from services.database_lister import DatabaseLister
from services.database_workout import DatabaseWorkoutOperator, DatabaseRunOperator


class TelegramBot:

    def __init__(self,
                 token: str,
                 database_lister: DatabaseLister,
                 database_workout_operator: DatabaseWorkoutOperator,
                 database_run_operator: DatabaseRunOperator) -> None:
        self.token = token
        self.database_lister = database_lister
        self.database_workout_operator = database_workout_operator
        self.database_run_operator = database_run_operator

        self.bot = AsyncTeleBot(token=token)

        @self.bot.message_handler(commands=['start'])
        async def command_start(message):
            await self.__command_start(message)

        @self.bot.message_handler(content_types=['text'])
        async def work_flow(message):
            await self.__work_flow(message)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('database/')
                                         and call.data.endswith('/operations'))
        async def get_database_operation(call):
            await self.__get_database_operation(call)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('database/')
                                         and call.data.endswith('/last_result'))
        async def process_database_operation(call):
            await self.__process_database_operation(call)

    async def __command_start(self, message):
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(text="üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"))
        keyboard.add(KeyboardButton(text="ü¶æ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"))
        user_data: User = message.from_user
        await self.bot.send_message(chat_id=message.chat.id,
                                    text=f"–ü—Ä–∏–≤–µ—Ç, {user_data.first_name}! –Ø –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–≤–æ–∏–º Notion.\n"
                                         f"–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ...",
                                    reply_markup=keyboard)

    async def __work_flow(self, message):
        if message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è":
            await self.bot.send_message(chat_id=message.chat.id,
                                        text="–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π!)")
        elif message.text == "ü¶æ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
            workout_databases: dict[UUID, str] = await self.database_lister.get_workout_databases()
            workout_keyboard_menu = InlineKeyboardMarkup()
            for key, value in workout_databases.items():
                workout_keyboard_menu.add(InlineKeyboardButton(text=value,
                                                               callback_data=f'database/{key}/operations'))
            await self.bot.send_message(chat_id=message.chat.id,
                                        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:",
                                        reply_markup=workout_keyboard_menu)

    async def __get_database_operation(self, call):
        params: list[str] = call.data.split('/')
        data_type: str = params[0]
        database_id: UUID = UUID(params[1])
        action: str = params[2]

        databases: dict[UUID, str] = await self.database_lister.get_all_databases()
        if not databases.get(database_id):
            # TODO: error
            print('Error !!!')

        workout_keyboard_menu = telebot.types.InlineKeyboardMarkup()
        workout_keyboard_menu.add(InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                                                       callback_data=f'{data_type}/{database_id}/last_result'))
        # workout_keyboard_menu.add(InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        #                                                callback_data=f'{data_type}/{data_id}/new_result'))
        await self.bot.send_message(chat_id=call.message.chat.id,
                                    text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è '{databases.get(database_id)}'",
                                    reply_markup=workout_keyboard_menu)

    async def __process_database_operation(self, call):
        params: list[str] = call.data.split('/')
        data_type: str = params[0]
        database_id: UUID = UUID(params[1])
        action: str = params[2]

        databases: dict[UUID, str] = await self.database_lister.get_all_databases()
        if not databases.get(database_id):
            # TODO: error
            print('Error !!!')
        database_title: str = databases.get(database_id)

        if database_title.split('.')[1].strip() == '–¢—É—Ä–Ω–∏–∫':
            report: dict[str, dict[str, int]] = \
                await self.database_workout_operator.get_report_last_workout(database_id=database_id,
                                                                             title=database_title.split('.')[1].strip())
            await self.bot.send_message(chat_id=call.message.chat.id,
                                        text=self.database_workout_operator.convert_report_to_str_mess(report))
        elif database_title.split('.')[1].strip() == '–ü—Ä–æ–±–µ–∂–∫–∞':
            report = \
                await self.database_run_operator.get_report_last_workout(database_id=database_id,
                                                                         title=database_title.split('.')[1].strip())
            await self.bot.send_message(chat_id=call.message.chat.id,
                                        text=self.database_run_operator.convert_report_to_str_mess(report))

    async def run(self):
        await self.bot.infinity_polling()
